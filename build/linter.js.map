{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/_stream_0.js",
    "lib/index.js",
    "lib/linter.js",
    "lib/logger.js",
    "lib/runner.js",
    "lib/utils.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\nconst tests = module.exports = [];\n    const defineTest = test => tests.push(test);\n    defineTest({\n  name: 'missing alt attribute',\n  selector: 'img:not([alt])',\n});\n\n  ",
    "\"use strict\";\nconst Linter = require('./linter');\n\nconst config = window.accessibilityLinterConfig || {};\nconst scriptElement = document.currentScript;\nif (scriptElement) {\n  eval(`!function(){${scriptElement.textContent}}()`); // eslint-disable-line no-eval\n  if (!('whitelist' in config)) {\n    config.whitelist = scriptElement.dataset.whitelist;\n  }\n}\n\nconst linter = new Linter(config);\nif (/^(:?interactive|complete)$/.test(document.readyState)) {\n  // Document already loaded\n  linter.observe();\n} else {\n  document.addEventListener('DOMContentLoaded', () => linter.observe());\n}\n\nmodule.exports = linter;\n",
    "\"use strict\";\nconst Runner = require('./runner');\nconst Logger = require('./logger');\nconst tests = require('./tests');\nconst utils = require('./utils');\n\nmodule.exports = class AccessibilityLinter extends Runner {\n  constructor(options) {\n    options = options || {};\n    options.logger = options.logger || new Logger();\n    options.tests = options.tests || tests;\n    super(options);\n\n    this.root = options.root || document;\n  }\n\n  /**\n   * Start looking for issues\n   */\n  observe() {\n    this.run(this.root);\n    this.observer = utils.observe(this.run.bind(this), this.root);\n  }\n\n  /**\n   * Stop looking for issues\n   */\n  stopObserving() {\n    this.observer.disconnect();\n    this.observer = null;\n  }\n};\n",
    "\"use strict\";\n/* eslint-disable no-console */\nmodule.exports = class Logger {\n  error(test, el) {\n    console.error(test.name, el, test.docHref);\n  }\n};\n",
    "\"use strict\";\nconst select = require('./utils').select;\n\nmodule.exports = class Runner {\n  constructor(config) {\n    this.tests = config.tests;\n    this.whitelist = config.whitelist;\n    this.logger = config.logger;\n\n    // Elements and issues already reported\n    this.reported = new WeakMap();\n    // Elements that are whitelisted\n    this.whitelisted = new WeakSet();\n  }\n\n  /**\n   * Run all the tests\n   * @param {HTMLElement} [context] A context to run the tests within\n   */\n  run(context) {\n    this.tests\n      .filter(test => !(test.globalOnly && context))\n      .forEach(test => this.runTest(test, context));\n  }\n\n  /**\n   * Run a single test\n   * @param {Object} test The test to run\n   * @param {HTMLElement} [context] A context to run the tests within\n   */\n  runTest(test, context) {\n    select(test.selector, context)\n      .filter(this.filterWhitelist, this)\n      .filter(el => (this.reported.get(el) || []).includes(test.name))\n      .filter(test.filter || Boolean)\n      .forEach(el => {\n        this.logger.error(test, el);\n        this.reported.set(el, (this.reported.get(el) || []).concat(test.name));\n      });\n  }\n\n  /**\n   * Filter elements on the whitelist\n   */\n  filterWhitelist(el) {\n    if (this.whitelisted.has(el)) {\n      return false;\n    }\n    if (this.whitelist.some(test => el.matches(test))) {\n      this.whitelisted.add(el);\n      return false;\n    }\n    return true;\n  }\n};\n",
    "\"use strict\";\n/**\n * Find DOM nodes from a selector or NodeList\n * @param {String|NodeList} selector\n * @param {HTMLElement} [context]\n */\nexports.select = function select(selector, context) {\n  let els = selector;\n  if (typeof selector === 'string') {\n    const root = context || document;\n    els = root.querySelectorAll(selector);\n  }\n  return Array.from(els);\n};\n\n/**\n * Observe for child list mutations\n * @param {Function} fn function to call for each mutation\n */\nexports.observe = function mutationObserver(fn, root) {\n  const observer = new MutationObserver(mutations => {\n    mutations.forEach(mutation => {\n      Array.from(mutation.addedNodes).forEach(node => fn(node));\n    });\n  });\n  observer.observe(root, { subtree: true, childList: true });\n  return observer;\n};\n"
  ]
}